#include "stdafx.h"
#include "alo_horse.h"
#include "../motiontable.h"

//extern NJS_OBJECT object_00E1AA0C;
//extern MotionTableAction stru_121AC70[5];

NJS_MKEY_A stru_121AB40[17] =
{
  { 0u, { 0, 0, 0 } },
  { 12u, { 0, 0, 0 } },
  { 13u, { 0, 4294967142, 0 } },
  { 14u, { 0, 0, 0 } },
  { 15u, { 0, 636, 0 } },
  { 16u, { 0, 1263, 0 } },
  { 17u, { 0, 1820, 0 } },
  { 18u, { 0, 2002, 0 } },
  { 19u, { 0, 1422, 0 } },
  { 20u, { 0, 701, 0 } },
  { 21u, { 0, 0, 0 } },
  { 22u, { 0, 4294966653, 0 } },
  { 23u, { 0, 4294966029, 0 } },
  { 24u, { 0, 4294965476, 0 } },
  { 25u, { 0, 4294965294, 0 } },
  { 26u, { 0, 4294965853, 0 } },
  { 27u, { 0, 4294966553, 0 } }
};

NJS_MKEY_F stru_121AA50[15] =
{
  { 0u, {  0.0,  0.0,  0.0 } },
  { 14u, {  0.0,  0.0,  0.0 } },
  { 15u, {  0.0,  0.02038,  0.0 } },
  { 16u, {  0.0,  0.062968001,  0.0 } },
  { 17u, {  0.0,  0.1,  0.0 } },
  { 18u, {  0.0,  0.1,  0.0 } },
  { 19u, {  0.0,  0.062963001,  0.0 } },
  { 20u, {  0.0,  0.020369999,  0.0 } },
  { 21u, {  0.0,  0.0,  0.0 } },
  { 22u, {  0.0,  0.020369999,  0.0 } },
  { 23u, {  0.0,  0.062963001,  0.0 } },
  { 24u, {  0.0,  0.1,  0.0 } },
  { 25u, {  0.0,  0.1,  0.0 } },
  { 26u, {  0.0,  0.062963001,  0.0 } },
  { 27u, {  0.0,  0.020369999,  0.0 } }
};


NJS_MDATA2 stru_121AC50[2] =
{
  { { NULL, NULL }, { 0u, 0u } },
  { { &stru_121AA50, &stru_121AB40 }, { 15u, 17u } }
};



NJS_MOTION stru_121AA44 =
{ &stru_121AC50, 28u, 3u, 2u };


MOTION_TABLE stru_121AC70[5] =
{
  { &stru_121AA44, 6, 0, 1, 4294967256,  0.0,  7.0,  0.2 },
  { &stru_121AA44, 3, 0, 4294967295, 4294967256,  7.0,  14.0,  0.2 },
  { &stru_121AA44, 6, 0, 3, 4294967256,  14.0,  18.0,  0.2 },
  { &stru_121AA44, 7, 0, 4294967295, 4294967256,  18.0,  25.0,  0.2 },
  { &stru_121AA44, 3, 0, 4294967295, 4294967256,  7.0,  0.0,  0.2 }
};

Sint32 vertex_00E1A278[] = { 0x1CF0029, 0x4D0000, 0x3E4CCCCC, 0x408D669A, 0x3FA0E135, 0x3F1F8C94, 0x3F470E0D, 0x3DAB1054, 0xBE4CCCD2u, 0x408D669A, 0x3FA0E135, 0xBF1F8C93u, 0x3F470E0D, 0x3DAB1054, 0x3E4CCCCC, 0x4086D6B5, 0x3F280EB7, 0x3F219AD5, 0x3F15D278, 0xBF024802u, 0xBE4CCCD2u, 0x4086D6B5, 0x3F280EB7, 0xBF219AD5u, 0x3F15D278, 0xBF024802u, 0xBE4CCCCEu, 0x404FAF07, 0x3FC73530, 0xBF4CD569u, 0xBF198CD9u, 0xBB9E1791u, 0x3E4CCCCD, 0x404FAF08, 0x3FC73532, 0x3F4CD56C, 0xBF198CD4u, 0xBB9E189Eu, 0x3E4CCCCC, 0x40239076, 0x3D891758, 0x3F645B77, 0x3EB7A99B, 0xBE8CCC1Du, 0xBE4CCCCEu, 0x40239076, 0x3D891758, 0xBF645B78u, 0x3EB7A997, 0xBE8CCC1Bu, 0x3E4CCCCE, 0x402846DD, 0xBF5D159Eu, 0x3F251B2E, 0x3F3E90FF, 0xBE311B0Fu, 0xBE4CCCCEu, 0x402846DC, 0xBF5D159Cu, 0xBF251B34u, 0x3F3E90FA, 0xBE311B08u, 0x3E4CCCCE, 0x401B1378, 0xBF9B08ECu, 0x3F221EF8, 0x3EF32A22, 0xBF1C6E3Du, 0xBE4CCCCEu, 0x401B1378, 0xBF9B08ECu, 0xBF221EF7u, 0x3EF32A21, 0xBF1C6E3Eu, 0x3E4CCCCC, 0x40566323, 0x4017C6AF, 0x3F1FAC3E, 0xBEB46271u, 0x3F329F52, 0xBE4CCCD0u, 0x40566323, 0x4017C6AF, 0xBF1FAC3Eu, 0xBEB46272u, 0x3F329F52, 0x3E4CCCCE, 0x3FF8A929, 0xBFAD208Cu, 0x3F2251CF, 0xBD848B24u, 0xBF454416u, 0xBE4CCCCCu, 0x3FF8A929, 0xBFAD208Cu, 0xBF2251CFu, 0xBD848B2Bu, 0xBF454416u, 0x3E4CCCCC, 0x4043F517, 0x400084F0, 0x3F1C01D4, 0xBF48EACEu, 0x3DE67BE5, 0xBE4CCCCEu, 0x4043F517, 0x400084F0, 0xBF1C01D6u, 0xBF48EACDu, 0x3DE67BE4, 0x3E4CCCD2, 0x3F94C5CD, 0xBF78D479u, 0x3F2048E5, 0xBF18CF6Au, 0xBF006DA8u, 0xBE4CCCCCu, 0x3F94C5CD, 0xBF78D479u, 0xBF2048E4u, 0xBF18CF6Bu, 0xBF006DA8u, 0x3E4CCCCC, 0x406F3796, 0x4018A20B, 0x3F1BE20D, 0x3EC17D63, 0x3F328A83, 0xBE4CCCCEu, 0x404835C6, 0x3FA093B0, 0xBF5BB4F5u, 0xBE94FF47u, 0x3ED8786A, 0xBE4CCCD2u, 0x406F3796, 0x4018A20B, 0xBF1BE20Cu, 0x3EC17D62, 0x3F328A84, 0x3E4CCCCE, 0x404835C7, 0x3FA093B1, 0x3F5BB4F5, 0xBE94FF4Eu, 0x3ED87865, 0x3E4CCCD2, 0x3F5F1EFA, 0x3D13BF88, 0x3F26413A, 0xBF42AAC1u, 0x3AA251C3, 0xBE4CCCCCu, 0x3F5F1EFA, 0x3D13BF88, 0xBF26413Au, 0xBF42AAC1u, 0x3AA25111, 0x3E4CCCCE, 0x3F9592E3, 0x3F86D527, 0x3F21621C, 0xBF1B094Fu, 0x3EF8A340, 0xBE4CCCCCu, 0x3F9592E3, 0x3F86D527, 0xBF21621Cu, 0xBF1B094Fu, 0x3EF8A340, 0x3E4CCCCE, 0x3FEB0391, 0x3FB5D998, 0x3F22266B, 0xBDCC2E42u, 0x3F4472C7, 0xBE4CCCCEu, 0x3FEB0391, 0x3FB5D998, 0xBF22266Bu, 0xBDCC2E44u, 0x3F4472C7, 0x3E4CCCCE, 0x4020BF97, 0x3FA041C7, 0x3F3C7284, 0x3DA65F46, 0x3F2C054A, 0xBE4CCCCEu, 0x4020BF97, 0x3FA041C7, 0xBF3C7285u, 0x3DA65F45, 0x3F2C0549, 0x3E4CCCCC, 0x40556BBD, 0x3E58C9AB, 0x3F2D30DF, 0x3E718FE5, 0xBF3296B0u, 0xBE4CCCD0u, 0x40556BBD, 0x3E58C9AB, 0xBF2D30DFu, 0x3E718FE3, 0xBF3296B0u, 0x32BBBD2E, 0x3FA26EE9, 0xC0187F79u, 0xBF800000u, 0xB30061F8u, 0xB1864673u, 0x32BBBD2E, 0x3F8E857E, 0xBF98B121u, 0xBF800000u, 0xB30061F8u, 0xB1864673u, 0xB2BBBD2Eu, 0x402DA5FB, 0xC00FA410u, 0xBF800000u, 0xB30061F8u, 0xB1864673u, 0xB2BBBD2Eu, 0x4023B145, 0xBF86FA53u, 0xBF800000u, 0xB30061F8u, 0xB1864673u, 0x3E376DEA, 0x3F73332D, 0x3E1D1A67, 0x3F5DB3D7, 0xB3CCD008u, 0x3EFFFFFF, 0x3E376DE0, 0x3E999995, 0x3E1D1A6C, 0x3F5DB3D5, 0xB3CCCFFBu, 0x3F000004, 0x33AE52F2, 0x3F73332F, 0xBE209B14u, 0x0, 0xB4117BB6u, 0xBF800000u, 0xB3B9F14Bu, 0x3E99999B, 0xBE209B0Bu, 0x33B60B5F, 0xB4117BB9u, 0xBF800000u, 0xBE376DDFu, 0x3F73332F, 0x3E1D1A62, 0xBF5DB3D9u, 0x3496C4EF, 0x3EFFFFFA, 0xBE376DEAu, 0x3E99999A, 0x3E1D1A69, 0xBF5DB3D6u, 0x3496C4F0, 0x3F000003, 0x3F800000, 0x40775C29, 0x3F8E6921, 0x3F0E00D0, 0x3ED50146, 0x3F3877B8, 0xBF800001u, 0x40775C29, 0x3F8E6921, 0xBF0E00DAu, 0x3ED50140, 0x3F3877B3, 0x3F800001, 0x406AE146, 0x3F7FFFFD, 0x3F0E00D7, 0xBF55013Eu, 0x33977862, 0xBF800000u, 0x406AE146, 0x3F7FFFFD, 0xBF0E00D2u, 0xBF550141u, 0x0, 0x3F800001, 0x40775C29, 0x3F632DB8, 0x3F0E00D8, 0x3ED50142, 0xBF3877B4u, 0xBF800000u, 0x40775C29, 0x3F632DB8, 0xBF0E00D3u, 0x3ED50144, 0xBF3877B7u, 0xB47C63D3u, 0x3FC5F7AC, 0x3F8A8D9B, 0xB6C54356u, 0xBF7FA999u, 0x3D5241F0, 0x3E5413D8, 0x4091289E, 0x3F30D5FE, 0x3F1EC4E8, 0x3EBA20E8, 0xBF31F40Fu, 0x3E5413D3, 0x40988CA9, 0x3F96A101, 0x3F12E3F8, 0x3F2EA3AD, 0x3EE8096F, 0xBE5413CFu, 0x40988CA8, 0x3F96A100, 0xBF12E402u, 0x3F2EA3A2, 0x3EE80977, 0xBE5413E2u, 0x4091289E, 0x3F30D5F6, 0xBF1EC4DDu, 0x3EBA20ED, 0xBF31F417u, 0x3F800000, 0x4010BA42, 0x3EBD8039, 0x3F0E00D2, 0x3F3B36F6, 0x3ECB3129, 0xBF800001u, 0x4010BA42, 0x3EBD8039, 0xBF0E00DCu, 0x3F3B36F0, 0x3ECB3121, 0x3F800001, 0x4002526A, 0x3EC08B4E, 0x3F0E00D7, 0xBF359788u, 0x3EDEAB6E, 0xBF800000u, 0x4002526A, 0x3EC08B4E, 0xBF0E00D2u, 0xBF35978Bu, 0x3EDEAB70, 0x3F800001, 0x40093201, 0x3E366F27, 0x3F0E00D6, 0xBCB3EC07u, 0xBF54EE3Eu, 0xBF800000u, 0x40093201, 0x3E366F27, 0xBF0E00D1u, 0xBCB3EC26u, 0xBF54EE42u, 0xBF333334u, 0x337BE23B, 0xBEE6666Bu, 0xBF2954EEu, 0xBF3B7086u, 0xBE26555Au, 0xBF333334u, 0x3EB33335, 0xBEB33336u, 0xBF423C17u, 0x3F22E0A8, 0x3E0F1881, 0xBF333334u, 0x3F266669, 0xBF800001u, 0xBF16028Fu, 0x3F47A370, 0xBE617A37u, 0xBF333334u, 0x3EB33336, 0xBF999999u, 0xBF11DEBFu, 0xBE62F472u, 0xBF4A9477u, 0x3F333334, 0x3EB33335, 0xBEB33336u, 0x3F423C17, 0x3F22E0A8, 0x3E0F1881, 0x3F333334, 0x337BE23B, 0xBEE6666Bu, 0x3F2954EE, 0xBF3B7086u, 0xBE26555Au, 0x3F333334, 0x3EB33336, 0xBF999999u, 0x3F11DEBF, 0xBE62F472u, 0xBF4A9477u, 0x3F333334, 0x3F266669, 0xBF800001u, 0x3F16028F, 0x3F47A370, 0xBE617A37u, 0xBF333334u, 0x3EB33334, 0x3EB33332, 0xBF409390u, 0x3F25A0F8, 0xBDFF2D6Fu, 0xBF333334u, 0x33871FF1, 0x3EE66665, 0xBF29EE79u, 0xBF3B68EFu, 0x3E1CCEF9, 0xBF333334u, 0x3EB33338, 0x3F9FFFFF, 0xBF131FC9u, 0xBE8EA37Bu, 0x3F44FCC7, 0xBF333334u, 0x3F266667, 0x3F8CCCCD, 0xBF14F409u, 0x3F429CE2, 0x3E93FBC0, 0x3F333334, 0x3EB33338, 0x3F9FFFFF, 0x3F131FC9, 0xBE8EA37Bu, 0x3F44FCC7, 0x3F333334, 0x3F266667, 0x3F8CCCCD, 0x3F14F409, 0x3F429CE2, 0x3E93FBC0, 0x3F333334, 0x33871FF1, 0x3EE66665, 0x3F29EE79, 0xBF3B68EFu, 0x3E1CCEF9, 0x3F333334, 0x3EB33334, 0x3EB33332, 0x3F409390, 0x3F25A0F8, 0xBDFF2D6Fu, 0xFF, 0x0 };

Sint16 poly_00E19EE0[] = { 0x2513, 0x4, 0xFFFFu, 0xFFFFu, 0xFFFFu, 0xFF, 0x3408, 0x403E, 0x241, 0x9E, 0x7, 0x9, 0x1E, 0x30, 0x0, 0x1F, 0x30, 0x0, 0x1D, 0x38, 0x64, 0x7, 0x0, 0x0, 0x1B, 0x2A, 0xCC, 0x19, 0x1, 0xFF, 0x1A, 0x2A, 0xCC, 0x18, 0x1, 0xFF, 0x6, 0x0, 0x0, 0x4, 0x1D, 0x38, 0x64, 0x1B, 0x2A, 0xCC, 0x1C, 0x38, 0x64, 0x1A, 0x2A, 0xCC, 0x3, 0xF, 0x0, 0x6C, 0xB, 0x13, 0x22, 0xA, 0x13, 0x22, 0x5, 0x1A, 0x2A, 0xCC, 0x6, 0x0, 0x0, 0x1C, 0x38, 0x64, 0x1E, 0x30, 0x0, 0x1D, 0x38, 0x64, 0xFFEFu, 0x18, 0x100, 0xFF, 0x6, 0xF1, 0x0, 0x8, 0x4D, 0x0, 0x7, 0xF1, 0x0, 0x9, 0x4D, 0x0, 0x19, 0x100, 0xFF, 0x13, 0x4C, 0xDE, 0x12, 0x4C, 0xDE, 0xE, 0x0, 0x6C, 0x8, 0x4D, 0x0, 0xA, 0x13, 0x22, 0x9, 0x4D, 0x0, 0xB, 0x13, 0x22, 0x13, 0x4C, 0xDE, 0xF, 0x0, 0x6C, 0xE, 0x0, 0x6C, 0xA, 0x13, 0x22, 0x4, 0x8, 0x4D, 0x0, 0x18, 0x100, 0xFF, 0x12, 0x4C, 0xDE, 0x19, 0x100, 0xFF, 0xFFF8u, 0x36, 0x0, 0x11, 0x32, 0x18, 0xFF, 0x33, 0x30, 0x11, 0x34, 0x30, 0x0, 0x36, 0x0, 0x11, 0x35, 0x0, 0x0, 0x32, 0x18, 0xFF, 0x34, 0x30, 0x0, 0x2408, 0x403F, 0x241, 0x46, 0x3, 0xD, 0x1, 0x8E, 0xFF1Du, 0x0, 0x8E, 0xFF1Du, 0x2, 0x29, 0xFF72u, 0x17, 0xDB, 0x32, 0x20, 0xA, 0x4D, 0x6, 0x1E, 0xFF, 0x21, 0xA, 0x4D, 0x7, 0x1E, 0xFF, 0x15, 0xDB, 0x32, 0x1F, 0x100, 0xB7, 0x17, 0xDB, 0x32, 0x1E, 0x100, 0xB7, 0x6, 0x1E, 0xFF, 0x5, 0x21, 0xA, 0x4D, 0x15, 0xDB, 0x32, 0x3, 0x29, 0xFF72u, 0x1, 0x8E, 0xFF1Du, 0x2, 0x29, 0xFF72u, 0x4, 0x21, 0xA, 0x4D, 0x3, 0x29, 0xFF72u, 0x20, 0xA, 0x4D, 0x2, 0x29, 0xFF72u, 0x3408, 0x403F, 0x241, 0x2D, 0x2, 0xFFF6u, 0x4, 0xA8, 0xBA, 0x10, 0x100, 0xFF, 0x5, 0x100, 0xBA, 0xC, 0x100, 0x92, 0x14, 0x100, 0x0, 0xD, 0xA8, 0x92, 0x16, 0xA8, 0x0, 0x11, 0xA8, 0xFF, 0x4, 0xA8, 0xBA, 0x10, 0x100, 0xFF, 0x4, 0xD, 0xA8, 0x92, 0x11, 0xA8, 0xFF, 0xC, 0x100, 0x92, 0x10, 0x100, 0xFF, 0x3408, 0x4040, 0x241, 0x20, 0x1, 0xFFF6u, 0x0, 0x0, 0x0, 0x17, 0x81, 0xFF, 0x5, 0xA7, 0xC4, 0x15, 0x81, 0xFF, 0x4, 0xA7, 0xC4, 0x1, 0x0, 0x0, 0x16, 0x100, 0x0, 0x0, 0x0, 0x0, 0x14, 0x100, 0x0, 0x5, 0xA7, 0xC4, 0x3408, 0x403D, 0x1A41, 0xE, 0x1, 0x4, 0x25, 0xF6, 0x0, 0x24, 0x0, 0x0, 0x23, 0x100, 0xFF, 0x22, 0xA, 0xFF, 0x3408, 0x4013, 0x4240, 0xA, 0x1, 0xFFF8u, 0x29, 0x28, 0x2B, 0x2A, 0x27, 0x26, 0x29, 0x28, 0x2513, 0x4, 0xFF00u, 0xFFFFu, 0xB200u, 0xFF, 0x240, 0x23, 0x6, 0x3, 0x30, 0x31, 0x2D, 0x3, 0x2E, 0x2C, 0x2F, 0x8, 0x2C, 0x2D, 0x2F, 0x31, 0x2E, 0x30, 0x2C, 0x2D, 0x3, 0x3B, 0x3C, 0x38, 0x3, 0x39, 0x37, 0x3A, 0x8, 0x37, 0x38, 0x3A, 0x3C, 0x39, 0x3B, 0x37, 0x38, 0x2513, 0x4, 0x6CD8, 0xFF1Fu, 0x6CD8, 0x1F, 0x240, 0x2C, 0x5, 0x3, 0x3E, 0x3F, 0x40, 0x3, 0x46, 0x47, 0x48, 0xFFFAu, 0x42, 0x46, 0x4B, 0x47, 0x49, 0x48, 0x14, 0x4A, 0x4C, 0x45, 0x3E, 0x3D, 0x40, 0x43, 0x44, 0x42, 0x41, 0x4B, 0x4C, 0x49, 0x4A, 0x48, 0x45, 0x46, 0x3D, 0x42, 0x43, 0xFFFAu, 0x4C, 0x3E, 0x41, 0x3F, 0x44, 0x40, 0xFF };

NJS_CNK_MODEL attach_00E1A9BC = { vertex_00E1A278, poly_00E19EE0, { 0, 2.383585f, 0.001055f }, 2.748905f };

NJS_OBJECT object_00E1A9D4 = { NJD_EVAL_UNIT_SCL | NJD_EVAL_BREAK, &attach_00E1A9BC, 0, 0.02037f, 0, 0xFFFFFD19, 0, 0, 1, 1, 1, NULL, NULL };

NJS_OBJECT object_00E1AA0C = { NJD_EVAL_UNIT_ANG | NJD_EVAL_UNIT_SCL | NJD_EVAL_HIDE , NULL, 0, 0, 0, 0, 0, 0, 1, 1, 1, &object_00E1A9D4, NULL };

CollisionData horseCollision = { 0, 0xC77, 0, 0,{ 0,1.2,0},{2,0,0},  0,0 };

const int DisplayModelMotionTablePtr = 0x00720450;

void DisplayModelMotionTable(MotionTableEntry* a1, NJS_CNK_OBJECT* a2)
{
	__asm
	{
		mov eax, a1
		mov ecx, a2
		call DisplayModelMotionTablePtr
	}
}

signed int  sub_530690(ObjectMaster* a1)
{
	ObjUnknownA* v1; // eax
	int v2; // ecx

	v1 = (ObjUnknownA*)a1->UnknownA_ptr;
	if (!v1)
	{
		return 1;
	}
	v2 = v1[1].field_8;
	v1->field_4 = 0;
	v1[1].field_8 = 0;
	v1->field_C = -1;
	if (v2)
	{
		if (*(ObjUnknownA * *)(v2 + 64) == v1)
		{
			*(short*)(v2 + 6) = 0;
			*(_DWORD*)(v2 + 64) = 0;
		}
		*(_DWORD*)(v2 + 12) = -1;
	}
	return 1;
}
FunctionPointer(void, SetMotionSkip, (MOTION_CTRL* ctrl, int num), 0x0073F5A0);
void Horse_Main(ObjectMaster* a1)
{
	MOTION_CTRL* v1; // esi
	EntityData1* v2; // edi
	al_entry_work* v3; // eax
	al_entry_work* v4; // ecx
	ObjectMaster* v5; // eax

	v1 = (MOTION_CTRL*)a1->UnknownB_ptr;
	v2 = (EntityData1*)a1->Data1;
	if (v2->Action)
	{
		if (v2->Action == 1)
		{
			if (--v2->InvulnerableTime <= 0u)
			{
				SetMotionSkip(v1, 4);
				v2->Action = 0;
				v2->NextAction = 0;
				v2->InvulnerableTime = 0;
				v2->Index = 0;
			}
			v3 = (al_entry_work*)a1->UnknownA_ptr;
			if (!v3 || (v4 = v3->pCommu) == 0 || v4->pCommu != v3)
			{
				SetMotionSkip(v1, 4);
				sub_530690(a1);
				v2->Action = 0;
				v2->NextAction = 0;
				v2->InvulnerableTime = 0;
				v2->Index = 0;
				MotionTableLoop(v1);
				Chao_AddToCollisionList(a1);
				return;

			}
		}
	}
	else
	{
		v5 = ALOField_Find(a1, 0, 175);
		if (v5)
		{
			v2->InvulnerableTime = 0;
			v2->Action = 1;
			v2->NextAction = 0;
			v2->Index = 0;
			SetMotionSkip(v1, 3);
			v2->InvulnerableTime = 1800;
		}
	}
	MotionTableLoop(v1);
	Chao_AddToCollisionList(a1);

	a1->DisplaySub(a1);
}

D3DMATRIX WorldMatrixBackup;
void SetupWorldMatrix()
{
	// The next three lines help to reduce floating-point rounding errors at large coordinates.
	ProjectToWorldSpace(); // set WorldMatrix to _nj_current_matrix_ptr_ * InverseViewMatrix
	WorldMatrixBackup = WorldMatrix;
	Direct3D_SetWorldTransform(); // set device's world transform to WorldMatrix
	memcpy(_nj_current_matrix_ptr_, &ViewMatrix, sizeof(NJS_MATRIX)); // reset current matrix to ViewMatrix
}
void Horse_Display(ObjectMaster* a1)
{
	//MotionTableEntry* motionTable = (MotionTableEntry*)a1->UnknownB_ptr;
	if (ScaleObjectMaster_XYZ(a1, 5.1999998, 4.5, 2.9000001)) {

		njPushMatrixEx();
		njSetTexture(&AL_TOY_TEXLIST);
		njControl3D_Add(NJD_CONTROL_3D_TRANS_MODIFIER | NJD_CONTROL_3D_SHADOW);

		njTranslate(0, a1->Data1->Position.x, a1->Data1->Position.y, a1->Data1->Position.z);
		njRotateY(0, a1->Data1->Rotation.y);
		//	njScale(0, 1, 1, 1);
			//njCnkDrawObject(&object_00E1AA0C);
			//sub_720A70(&object_00E1AA0C, motionTable->NJS_MOTION, 0);
			//njAction_QueueObject(&object_00E1AA0C, motionTable->NJS_MOTION2, motionTable->frame);
		//sub_73F6E0(&object_00E1AA0C, (MotionTableEntry*)& a1->UnknownB_ptr);
		//njCnkDrawObject(& object_00E1AA0C);
		njPushMatrixEx();
		SetupWorldMatrix();
		Direct3D_SetChunkModelRenderState();

		//njTranslate(0, 3, 0, 0);
		DisplayModelMotionTable((MotionTableEntry*)a1->UnknownB_ptr, &object_00E1AA0C);
		Direct3D_UnsetChunkModelRenderState();
		njPopMatrixEx();

		njControl3D_Remove(NJD_CONTROL_3D_TRANS_MODIFIER | NJD_CONTROL_3D_SHADOW);
		njPopMatrixEx();
	}
}

void Horse_Delete(ObjectMaster* a1)
{
	ObjectFunc(ALO_Delete, 0x71A6B0);
	ALO_Delete(a1);
	_HeapFree(a1->Data1);
	a1->Data1 = 0;
	_HeapFree(a1->Data2);
	a1->Data2 = 0;
	_HeapFree(a1->UnknownB_ptr);
	a1->UnknownB_ptr = 0;

	//DeleteObjectMaster(a1);
}

void Horse_Load(ObjectMaster* a1)
{
	AddToGlobalChaoThingMaybe(6u, a1, 7, 0);
	a1->DeleteSub = Horse_Delete;
	a1->MainSub = (void(__cdecl*)(ObjectMaster*))Horse_Main;
	a1->DisplaySub = (void(__cdecl*)(ObjectMaster*))Horse_Display;
}

void PlaceHorse()
{
	ObjectMaster* horse;
	EntityData1* horseData;
	//Can't animate yet.
	horse = LoadObject(LoadObj_Data1, 3, Horse_Load);
	//WriteJump((void*)0x007896E5, njCnkDrawObject);
	horse->DisplaySub = Horse_Display;
	horse->UnknownB_ptr = _HeapAlloc(1, sizeof(MOTION_CTRL));
	horseData = horse->Data1;
	LoadMotionTable((MOTION_CTRL*)horse->UnknownB_ptr, stru_121AC70);
	SetMotionSkip((MOTION_CTRL*)horse->UnknownB_ptr, 4);
	//	TVObject = tv;
		//PlayMotionTable((MotionTableEntry*)horse->UnknownB_ptr, 4);
		//AllocateMove(horse);
		//ChaoData2* data2 = (ChaoData2*)horse->Data2;
		//data2->field_48 = -0.05;
		//data2->field_30 = 3328;
	if (horseData)
	{
		if (!GetModuleHandle(L"DCMods_Main")) {
			horseData->Position.x = 323.8f;
			horseData->Position.y = 15.3f;
			horseData->Position.z = -28.7f;
		}
		else
		{
			horseData->Position.x = 170.5;
			horseData->Position.y = 15.3f;
			horseData->Position.z = -53.7f;

		}
		//horseData->Rotation.x = 15;
		horseData->Rotation.y = 12800;
		horseData->Scale.x = 1;
		horseData->Scale.y = 1;
		horseData->Scale.z = 1;
		InitCollision(horse, &horseCollision, 1, 4);
	}
}

